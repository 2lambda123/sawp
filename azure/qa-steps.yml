steps:
  # Dependencies
  # ============
  # Install or update dependencies
  #

  # System packages
  # valgrind 3.17 is required and should be install from source
  - script: valgrind --version || sudo yum install -y valgrind
    displayName: install valgrind

  # Use local cargo install path
  - script: echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    displayName: set path

  # Installs cargo and rust stable
  - script: cargo --version || curl https://sh.rustup.rs -sSf | sh -s -- -y
    displayName: install rust

  # - STABLE
  - script: rustup update stable
    displayName: install rust (stable)
  - script: cargo install cargo-valgrind cargo-tarpaulin cbindgen
    displayName: update packages (stable)

  # - MSRV
  - script: rustup update 1.41.1
    displayName: install rust (msrv)
  
  # - NIGHTLY
  - script: rustup update nightly
    displayName: install rust (nightly)
  
  - script: rustup +nightly component add rust-src
    displayName: install rust-src (nightly)

  - script: cargo +nightly install cargo-fuzz
    displayName: update packages (nightly)

  # Get the package version
  - script: echo "##vso[task.setvariable variable=version]$((test -f Cargo.lock || cargo generate-lockfile) && cargo pkgid | cut -d# -f 2)"
    displayName: package version

  # QA Steps
  # ========
  #

  # Check code formatting differences
  - script: cargo fmt --all -- --check
    displayName: check fmt
  
  # Build project
  # First, with the minimum supported rust version
  - script: cargo +1.41.1 build --workspace --all-targets --all-features --release
    displayName: build (msrv)
  
  # Then, with stable
  - script: cargo build --workspace --all-targets --all-features --release
    displayName: build (stable)
  
  # Check linting warnings
  - script: cargo clippy --workspace --all-targets --all-features -- -D warnings
    displayName: check clippy

  # Build documentation
  - script: cargo doc --workspace --all-features --no-deps
    displayName: cargo doc

  # Publish documentation
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: target/doc
      includeRootFolder: false
      archiveType: tar
      tarCompression: gz
      archiveFile: $(Build.ArtifactStagingDirectory)/sawp-doc-$(version).tar.gz
      replaceExistingArchive: true

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/sawp-doc-$(version).tar.gz
      artifactName: sawp-$(version).tar.gz

  # Run the unit tests
  - script: cargo test --workspace --all-targets --all-features
    displayName: run tests
  
  # Run the memory checks
  - script: make memcheck
    displayName: memcheck

  # Run the doc tests
  # Needed until this issue is fixed: https://github.com/rust-lang/cargo/issues/6669
  - script: cargo test --workspace --doc --all-features
    displayName: run doc tests

  # Build fuzz
  - script: cargo +nightly fuzz build
    displayName: build fuzz

  # Check code coverage
  - script: |
      OUTPUT=$(cargo tarpaulin -v --all --all-features --out Xml)
      echo "${OUTPUT}"

      if [[ $(echo "${OUTPUT}" | tail -1 | cut -d ' ' -f 1) < 75 ]]
      then
          echo "Coverage does not meet required percentage"
          exit 1
      fi
    displayName: check code coverage

  # Publish the code coverage reports
  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: cobertura.xml

  # Check if cargo publish would pass
  - script: cargo publish --dry-run
    displayName: check publish
